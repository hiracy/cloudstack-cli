#!/usr/bin/env ruby

$LOAD_PATH.unshift File.dirname(__FILE__)

require "thor"
require './lib/cloudstack-bootstrap'


class Server < Thor
  desc "create NAME", "create a server"
  option :zone, :required => true
  option :template, :required => true
  option :offering, :required => true
  option :networks, :type => :array, :required => true
  option :project
  option :port_forwarding, :type => :array, :aliases => :pf, :default => [], :description => "public_ip:port"
  option :interactive, :type => :boolean
  def create(name)
    CloudstackCli::Cli.new.bootstrap_server(
        name,
        options[:zone],
        options[:template],
        options[:offering],
        options[:networks],
        options[:port_forwarding],
        options[:project]
      )
  end

  desc "list", "list servers"
  option :listall, :type => :boolean
  option :text, :type => :boolean
  option :project
  def list
    cs_cli = CloudstackCli::Cli.new
    if options[:project]
      project = cs_cli.projects.select { |p| p['name'] == options[:project] }.first
      exit_now! "Project '#{options[:project]}' not found" unless project
      options[:project_id] = project['id']
    end
    servers = cs_cli.virtual_machines(options)
    if servers.size < 1
      puts "No servers found"
    else
      if options[:text]
        servers.each do |server|
          puts "#{server['name']} - #{server['state']} - #{server['domain']}"
        end
      else
        cs_cli.virtual_machines_table(servers)
      end
    end
  end
end

class Zone < Thor

  desc "list", "list zones"
  def list
    cs_cli = CloudstackCli::Cli.new
    zones = cs_cli.zones
    if zones.size < 1
      puts "No projects found"
    else
      zones.each do |zone|
        puts "#{zone['name']} - #{zone['description']}"
      end
    end
  end

end

class Network < Thor
  desc "list", "list networks"
  option :project
  def list
    cs_cli = CloudstackCli::Cli.new
    if options[:project]
      project = cs_cli.projects.select { |p| p['name'] == options[:project] }.first
      exit_now! "Project '#{options[:project]}' not found" unless project
    end
    
    networks = cs_cli.networks(project ? project['id'] : nil)
    if networks.size < 1
      puts "No networks found"
    else
      networks.each do |network|
        puts "#{network['name']} - #{network['displaytext']}"
      end
    end
  end

end

class Offering < Thor

  desc 'list', 'list offerings by type [compute|network|storage]'
  def list(type='compute')
    cs_cli = CloudstackCli::Cli.new
    offerings = cs_cli.server_offerings
    if offerings.size < 1
      puts "No offerings found"
    else
      offerings.each do |offering|
        puts "#{offering['name']} - #{offering['displaytext']} - #{offering['domain']}"
      end
    end
  end
end

class Project < Thor

  desc "list", "list projects"
  def list
    cs_cli = CloudstackCli::Cli.new
    projects = cs_cli.projects
    if projects.size < 1
      puts "No projects found"
    else
      projects.each do |project|
        puts "#{project['name']} - #{project['displaytext']} - #{project['domain']}"
      end
    end
  end

end

class Template < Thor

  desc 'list', 'list templates by type [featured|self|self-executable|executable|community]' 
  option :project
  def list(type='featured')
    cs_cli = CloudstackCli::Cli.new
    
    if options[:project]
      project = cs_cli.projects.select { |p| p['name'] == options[:project] }.first
      exit_now! "Project '#{options[:project]}' not found" unless project
    end
    
    exit_now! "unsupported template type '#{type}'" unless
      %w(featured self self-executable executable community).include? type
    templates = cs_cli.templates(type, project ? project['id'] : nil)
    if templates.size < 1
      puts "No templates found"
    else
      templates.each do |template|
        puts template['name']
      end
    end
  end

end

class CsBootstrap < Thor
  class_option :verbose, :type => :boolean
  
  desc "zone SUBCOMMAND ...ARGS", "manage zones"
  subcommand "zone", Zone

  desc "project SUBCOMMAND ...ARGS", "manage servers"
  subcommand "project", Project

  desc "server SUBCOMMAND ...ARGS", "manage servers"
  subcommand "server", Server

  desc "offering SUBCOMMAND ...ARGS", "manage offerings"
  subcommand "offering", Offering

  desc "network SUBCOMMAND ...ARGS", "manage networks"
  subcommand "network", Network

  desc "template SUBCOMMAND ...ARGS", "manage template"
  subcommand "template", Template
end

 
CsBootstrap.start(ARGV)